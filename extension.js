//引入模块
const vscode = require('vscode');
const axios = require('axios').default;
const katex = require("@luogu-dev/markdown-it-katex");
const MarkdownIt = require('markdown-it');
const Cookies = require('tough-cookie');
const CookieSupport = require("axios-cookiejar-support").default;
const fs = require('fs');
const Child_Process=require('child_process');
//设定常量
const UserAgent='QuickOI/1.0.0';
const LG_Difficulty=['暂无评定','入门','普及-','普及/提高-','普及+/提高','提高+/省选-','省选/NOI-','NOI/NOI+/CTSC'];
var jar=new Cookies.CookieJar()
function SetAPI_Request(hostURL){//API设置函数
	const Request=axios.create({
		baseURL: hostURL,
		withCredentials: true,
		jar
	  })
	const defaults=axios.defaults;
	if(!defaults.transformRequest){
		defaults.transformRequest = [];
	}else if(!(defaults.transformRequest instanceof Array)){
		defaults.transformRequest=[defaults.transformRequest];
	}
	defaults.transformRequest.push((data,headers)=>{
		headers['User-Agent']=UserAgent;
		return data;
	});
	return CookieSupport(Request);
}
//Markdown设置
const Markdown=MarkdownIt();
Markdown.use(katex);
//定义API
const LG_API=SetAPI_Request('https://www.luogu.com.cn');
const VIJOS_API=SetAPI_Request('https://vijos.org');
//通用函数
function ArrayLength(Array) {
	var length=0;
	for(var i in Array){
		length++;
	}
	console.log(length);
	return length;
}
function DeleteHtmlCode(str,is_title=false) {
	if(!is_title){
		var code=str.substring(1,str.length-2);
		code=code.replace(/<h2>/g,"<h3>");
		code=code.replace(/<\/h2>/g,"</h3>");
		if(code.match('登录后递交')=='登录后递交')code=code.split('</div>')[0];
		console.log(code);
	}
	else var code=str.split('>')[1].split('<')[0];
	//console.log(code);
	return code;
}
//Vijos专用函数
function Split_Data(DataArray,PID) {
	console.log(5%2);
	var Data_Split=[];
	Data_Split.push(PID);
	Data_Split.push(DeleteHtmlCode(DataArray[1],true));//题目标题切割
	for(var i=7;;i++){
		if(DataArray[i].match('section__title')=='section__title')break;
		if(i % 2!=0)Data_Split.push(DeleteHtmlCode(DataArray[i]));
		else Data_Split.push(DeleteHtmlCode(DataArray[i].substring(2,DataArray[i].length-1)));
	}
	// Data_Split.push(DeleteHtmlCode(DataArray[8]));//背景
	// Data_Split.push(DeleteHtmlCode(DataArray[10]));//描述
	// Data_Split.push(DeleteHtmlCode(DataArray[12]));//格式
	// Data_Split.push(DeleteHtmlCode(DataArray[14]));//样例1
	// Data_Split.push(DeleteHtmlCode(DataArray[16]));//限制
	// Data_Split.push(DeleteHtmlCode(DataArray[18]));//提示
	console.log(Data_Split);
	return Data_Split;
}
function VJ_BuildProblemPages(DataArray){
	console.log(DataArray.length);
	var Body=``;
	for(var i=2;i<DataArray.length;i+=2){
		Body+=`
			<h2>${DataArray[i]}</h2>
			${DataArray[i+1]}
		`
	}
	var HTML=`
	<! DOCTYPE html>
		<head>
			<meta charset="UTF-8">
			<title>${DataArray[0]+'：'+DataArray[1]}</title>
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css" integrity="sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq" crossorigin="anonymous">
  			<script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js" integrity="sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz" crossorigin="anonymous"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js" integrity="sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI" crossorigin="anonymous" onload="renderMathInElement(document.body);"></script>
		</head>
		<body>
			<h1>${DataArray[0]+'：'+DataArray[1]}</h1>
			<hr>
			${Body}		
			<br>
			<br>
			<b style="text-align: center;">题目来源于Vijos。</b>
			<br>
			<br>
			<b style="text-align: center;">Generated By Quick OI.</b>
		</body>
	</html>
	`
	return HTML;
}
//洛谷专用函数
function LG_SamplesGenerator(Samples_Array) {
	var length=ArrayLength(Samples_Array);
	if(length==0)return '无';
	var Samples_Code=``;
	for(var i=0;i<length;i++){
		var input='```\n'+String(Samples_Array[i][0])+'\n```';
		var output='```\n'+String(Samples_Array[i][1])+'\n```';
		console.log(input,output,Markdown.render(input),Markdown.render(output));
		input=Markdown.render(input);
		output=Markdown.render(output);
		Samples_Code+=`
			<h3>Sample #${i+1}</h3>
				<b>Input:</b>
				${input}
				<b>Output:</b>
				${output}
		`

	}
	return Samples_Code;
}
function LG_LimitsGenerator(LimitsJson) {
	//console.log(LimitsJson);
	var length=ArrayLength(LimitsJson.memory);
	var limits=``;
	for(var i=0;i<length;i++){
		limits+=`
		<tr>
			<td>#${i+1}</td>
			<td>${String(LimitsJson.memory[i])+'KB'}</td>
			<td>${String(LimitsJson.time[i])+'ms'}</td>
		</tr>	
		`
	}
	var code=`
		<table>
			<tr>
				<th>Samples</th>
				<th>Memory</th>
				<th>Time</th>
			</tr>
			${limits}
		</table>
	`
	console.log(code);
	return code;
}
function LG_BuildProblemPages(ProblemJson) {
	var HTML=`
	<!DOCTYPE html>
		<head>
			<meta charset="UTF-8">
			<title>${'洛谷'+ProblemJson.data.currentData.problem.pid+'：'+ProblemJson.data.currentData.problem.title}</title>
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.12.0/build/styles/default.min.css">
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css">
		</head>
		<body>
			<h1>${ProblemJson.data.currentData.problem.pid+'：'+ProblemJson.data.currentData.problem.title}</h1>
			<hr>
			<h2>题目背景</h2>
			${Markdown.render(ProblemJson.data.currentData.problem.background==""?'没有背景':ProblemJson.data.currentData.problem.background)}
			<h2>题目描述</h2>
			${Markdown.render(ProblemJson.data.currentData.problem.description==""?'没有题目描述':ProblemJson.data.currentData.problem.description)}
			<h2>输入格式</h2>
			${Markdown.render(ProblemJson.data.currentData.problem.inputFormat==""?'没有输入格式':ProblemJson.data.currentData.problem.inputFormat)}
			<h2>输出格式</h2>
			${Markdown.render(ProblemJson.data.currentData.problem.outputFormat==""?'没有输出格式':ProblemJson.data.currentData.problem.outputFormat)}
			<h2>题目样例</h2>
			${LG_SamplesGenerator(ProblemJson.data.currentData.problem.samples)}
			<h2>提示</h2>
			${Markdown.render(ProblemJson.data.currentData.problem.hint==""?'没有提示':ProblemJson.data.currentData.problem.hint)}
			<br>
			<br>
			<b>题目难度：${LG_Difficulty[ProblemJson.data.currentData.problem.difficulty]}</b>
			<br>
			<b>总提交：${ProblemJson.data.currentData.problem.totalSubmit}</b>
			<br>
			<b>总通过：${ProblemJson.data.currentData.problem.totalAccepted}</b>
			<br>
			<b>数据限制：</b>
			<br>
			${LG_LimitsGenerator(ProblemJson.data.currentData.problem.limits)}
			<br>
			<br>
			<b style="text-align: center;">题目来源于洛谷，出题者${ProblemJson.data.currentData.problem.provider.name}</b>
			<br>
			<b style="text-align: center;">Generated By Quick OI.</b>
		</body>
	</html>
	`
	console.log(ProblemJson.data.currentData.problem.background)
	//console.log(HTML)
	return HTML;
}
/**
 * @param {vscode.ExtensionContext} context
 */
function activate(context) {
	console.log('Quick OI Active.');

	let disposable = vscode.commands.registerCommand('quick-oi.luogu.problem', async function () {
		try{
			var LG_PID=await vscode.window.showInputBox({
				placeHolder: '请输入题号',
				ignoreFocusOut: true
			});
			var ProblemJson=await LG_API.get('/problem/'+LG_PID+'?_contentOnly');
			console.log(ProblemJson,ProblemJson.data.currentData.problem.pid);
			const panel=vscode.window.createWebviewPanel(ProblemJson.data.currentData.problem.pid+'：'+ProblemJson.data.currentData.problem.title,
														 ProblemJson.data.currentData.problem.pid+'：'+ProblemJson.data.currentData.problem.title,
														 vscode.ViewColumn.Two,{
															enableScripts: true,
															retainContextWhenHidden: true
														 });
			console.log(panel);
			panel.webview.html=LG_BuildProblemPages(ProblemJson);
			vscode.window.showInformationMessage('题目获取完毕！');
		}catch(err){
			//TODO：读取本地缓存
			vscode.window.showErrorMessage('获取题目失败，请检查网络连接或题号！');
		}
	});
	context.subscriptions.push(disposable);
	disposable = vscode.commands.registerCommand('quick-oi.vijos.problem',async function () {
		try{
			var VJ_PID=await vscode.window.showInputBox({
				placeHolder: '请输入题号',
				ignoreFocusOut: true
			});
			var ProblemHTML=(await VIJOS_API.get('/p/' + VJ_PID)).data;
			// console.log(ProblemHTML);
			console.log(ProblemHTML.split('h1'))
			console.log(((ProblemHTML.split('h1')[1]).split('>')))
			console.log(((ProblemHTML.split('h1')[1]).split('>')[1]).split('<'))
			var Data=Split_Data(ProblemHTML.split('h1'),VJ_PID);
			var HTML_Show=VJ_BuildProblemPages(Data);
			// var VJ_ProblemTitle=((ProblemHTML.split('h1')[1]).split('>')[1]).split('<')[0];
			// console.log(VJ_ProblemTitle);
			const panel=vscode.window.createWebviewPanel(VJ_PID+'：'+Data[1],
														 VJ_PID+'：'+Data[1],
														 vscode.ViewColumn.Two,{
															enableScripts: true,
															retainContextWhenHidden: true
														 });
			panel.webview.html=HTML_Show;
			vscode.window.showInformationMessage('题目获取完毕！');
		}catch(err){
			//TODO：读取本地缓存
			vscode.window.showErrorMessage('获取题目失败，请检查网络连接或题号！');
		}
	})
	context.subscriptions.push(disposable);
	disposable = vscode.commands.registerCommand('quick-oi.about',async function () {
		vscode.window.showInformationMessage('Quick OI V1.0.0 User-Agent:'+UserAgent);
	})
	context.subscriptions.push(disposable);
	disposable = vscode.commands.registerCommand('quick-oi.templates.import',async function () {
		try{
			var settings=JSON.parse((fs.readFileSync(__dirname+'/Templates/settings.json').toString()));
			console.log(settings);
			var file_name=await vscode.window.showQuickPick(settings.friendly_name,{
				canPickMany: false,
				ignoreFocusOut: true,
				placeHolder: "请选择您要插入的模板"
			}).then((choice)=>{
				for(var i=0;i<ArrayLength(settings.friendly_name);i++){
					if(settings.friendly_name[i]==choice){
						return settings.file_name[i];
					}
				}
				return undefined;
			});
			if(file_name==undefined)return;
			vscode.window.activeTextEditor.edit(editBuilder => {
				const end=new vscode.Position(vscode.window.activeTextEditor.document.lineCount+1,0);
				editBuilder.replace(new vscode.Range(new vscode.Position(0, 0), end),fs.readFileSync(__dirname+'/Templates/'+file_name).toString());
			});
		}catch(err){
			vscode.window.showErrorMessage('Something was happened...');
		}
	});
	context.subscriptions.push(disposable);
	disposable = vscode.commands.registerCommand('quick-oi.templates.settings',async function () {
		vscode.workspace.openTextDocument(__dirname+'/Templates/settings.json').then(doc=>{
			vscode.window.showTextDocument(doc);
		});
		Child_Process.exec('start '+__dirname+'/Templates');
	})
	context.subscriptions.push(disposable);
	
}

// this method is called when your extension is deactivated
function deactivate() {}

module.exports = {
	activate,
	deactivate
}